name: Build the application.

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      - name: Compress build artifacts
        run: zip -r docs.zip docs

      - name: Check for existing Release
        id: check_release
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}" # プッシュされたタグ名
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}")
          if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
            echo "RELEASE_ID=$(echo $RESPONSE | jq -r '.id')" >> $GITHUB_ENV
            echo "EXISTING_RELEASE=true" >> $GITHUB_ENV
          else
            echo "EXISTING_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create or Update Release
        id: release
        if: env.EXISTING_RELEASE == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload to existing Release
        if: env.EXISTING_RELEASE == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Upload to new Release
        if: steps.release.outputs.id != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip
