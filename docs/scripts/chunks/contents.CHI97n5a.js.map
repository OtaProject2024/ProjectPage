{"version":3,"file":"contents.CHI97n5a.js","sources":["../../../src/components/modules/globals/model.vue","../../../src/components/modules/contents/video.vue","../../../../../../../../../assets/videos/coming_soon.webm"],"sourcesContent":["<script setup>\nimport {ref, onMounted, onUnmounted} from 'vue';\nimport * as THREE from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader';\n\nconst props = defineProps({\n  path: String,\n  scale: Number,\n  positionY: {\n    type: Number,\n    default: 0\n  },\n  rotation: {\n    type: Boolean,\n    default: false\n  },\n});\n\nconst canvasRef = ref(null);\nconst frameRef = ref(null);\n\n// scene\nconst scene = new THREE.Scene();\n\n// GLB models load\nconst glbLoader = new GLTFLoader();\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath(\"./scripts/libraries/draco/\");\nglbLoader.setDRACOLoader(dracoLoader);\n\nglbLoader.load(props.path, (m) => {\n  const model = m.scene;\n  model.position.set(0, props.positionY, 0);\n  model.scale.set(props.scale, props.scale, props.scale);\n  model.rotation.y = props.rotation ? Math.PI / 2 : -Math.PI / 2;\n  scene.add(model);\n\n  // Animate\n  function animate() {\n    requestAnimationFrame(animate);\n    model.rotation.y += 0.0025;\n    renderer.render(scene, camera);\n  }\n\n  animate();\n});\n\n// Light\nconst ambientLight = new THREE.AmbientLight(0x404040);\nconst hemisphereLight = new THREE.HemisphereLight(0x404040);\nconst directLight = new THREE.DirectionalLight(0xffffff, 5);\ndirectLight.position.set(5, 5, 5);\n[ambientLight, hemisphereLight, directLight,].forEach(light => scene.add(light));\n\nlet renderer, camera\nonMounted(() => {\n  // Renderer\n  const canvas = canvasRef.value;\n  const frame = frameRef.value;\n\n  renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n  });\n  renderer.setSize(frame.clientWidth, frame.clientHeight);\n\n  // Camera\n  camera = new THREE.PerspectiveCamera(75, frame.clientWidth / frame.clientHeight, 0.1, 1000);\n  camera.position.z = 5;\n\n  // Resize\n  function onResize() {\n    const width = frame.clientWidth;\n    const height = frame.clientHeight;\n\n    // Fix renderer\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n\n    // Fix camera\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  onResize();\n  window.addEventListener(\"resize\", onResize);\n\n  onUnmounted(() => {\n    window.removeEventListener(\"resize\", onResize);\n    if (renderer) renderer.dispose();\n    if (scene) {\n      scene.traverse((object) => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) object.material.dispose();\n      });\n    }\n  });\n});\n</script>\n\n<template>\n  <div ref=\"frameRef\"\n       class=\"flex justify-center w-full h-[150px] sm:h-[200px] md:h-[250px] rounded-lg bg-zinc-800 bg-opacity-80 my-5\"\n       id=\"frame\">\n    <canvas ref=\"canvasRef\"\n            class=\"w-[300px] sm:w-[400px] md:w-[500px] h-full\"\n            id=\"model\"></canvas>\n  </div>\n</template>\n","<script setup></script>\n\n<template>\n  <div class=\"animate-part-in text-gray-200 w-11/12 flex flex-col items-center p-3 mt-2 mb-12\">\n    <p>\n      coming soon...\n    </p>\n    <video class=\"w-full rounded-lg my-5\" controls src=\"/assets/videos/coming_soon.webm\"></video>\n  </div>\n</template>\n","export default \"__VITE_PUBLIC_ASSET__ab0287e6__\""],"names":["props","__props","canvasRef","ref","frameRef","scene","THREE.Scene","glbLoader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","load","path","m","model","position","set","positionY","scale","rotation","y","Math","PI","add","animate","requestAnimationFrame","renderer","render","camera","ambientLight","THREE.AmbientLight","hemisphereLight","THREE.HemisphereLight","directLight","THREE.DirectionalLight","forEach","light","onMounted","canvas","value","frame","onResize","width","clientWidth","height","clientHeight","setPixelRatio","window","devicePixelRatio","setSize","aspect","updateProjectionMatrix","THREE.WebGLRenderer","alpha","THREE.PerspectiveCamera","z","addEventListener","onUnmounted","removeEventListener","dispose","traverse","object","geometry","material","_ctx","_cache","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","class","controls"],"mappings":"gcAMA,MAAMA,EAAQC,EAaRC,EAAYC,EAAI,MAChBC,EAAWD,EAAI,MAGfE,EAAQ,IAAIC,EAGZC,EAAY,IAAIC,EAChBC,EAAc,IAAIC,EACxBD,EAAYE,eAAe,8BAC3BJ,EAAUK,eAAeH,GAEzBF,EAAUM,KAAKb,EAAMc,MAAOC,IAC1B,MAAMC,EAAQD,EAAEV,MAChBW,EAAMC,SAASC,IAAI,EAAGlB,EAAMmB,UAAW,GACvCH,EAAMI,MAAMF,IAAIlB,EAAMoB,MAAOpB,EAAMoB,MAAOpB,EAAMoB,OAC1CJ,EAAAK,SAASC,EAAItB,EAAMqB,SAAWE,KAAKC,GAAK,GAAKD,KAAKC,GAAK,EAC7DnB,EAAMoB,IAAIT,GAGV,SAASU,IACPC,sBAAsBD,GACtBV,EAAMK,SAASC,GAAK,MACXM,EAAAC,OAAOxB,EAAOyB,EAC3B,CAEWJ,EAAA,IAIL,MAAAK,EAAe,IAAIC,EAAmB,SACtCC,EAAkB,IAAIC,EAAsB,SAC5CC,EAAc,IAAIC,EAAuB,SAAU,GAIzD,IAAIR,EAAUE,SAHdK,EAAYlB,SAASC,IAAI,EAAG,EAAG,GAC9B,CAAAa,EAAcE,EAAiBE,GAAcE,SAAiBC,GAAAjC,EAAMoB,IAAIa,KAGzEC,GAAU,KAER,MAAMC,EAAStC,EAAUuC,MACnBC,EAAQtC,EAASqC,MAavB,SAASE,IACP,MAAMC,EAAQF,EAAMG,YACdC,EAASJ,EAAMK,aAGZnB,EAAAoB,cAAcC,OAAOC,kBACrBtB,EAAAuB,QAAQP,EAAOE,GAGxBhB,EAAOsB,OAASR,EAAQE,EACxBhB,EAAOuB,wBACX,CAtBEzB,EAAW,IAAI0B,EAAoB,CACjCd,SACAe,OAAO,IAET3B,EAASuB,QAAQT,EAAMG,YAAaH,EAAMK,cAGjCjB,EAAA,IAAI0B,EAAwB,GAAId,EAAMG,YAAcH,EAAMK,aAAc,GAAK,KACtFjB,EAAOb,SAASwC,EAAI,EAgBVd,IACHM,OAAAS,iBAAiB,SAAUf,GAElCgB,GAAY,KACHV,OAAAW,oBAAoB,SAAUjB,GACjCf,KAAmBiC,UACnBxD,GACIA,EAAAyD,UAAUC,IACVA,EAAOC,UAAiBD,EAAAC,SAASH,UACjCE,EAAOE,UAAiBF,EAAAE,SAASJ,SAAS,GAEtD,GACG,83HC9FD,SAAAK,EAAAC,GACEC,OAAAA,IAEIC,EAAJ,MAAAC,EAAAH,EAAA,KAAAA,EAAA,GAAA,CACAI,EAA6F,IAAA,KAAA,oBAAA,GAAtFA,EAA8B,QAAA,CAACC,MAAA,yBAASC,SAAqC,OCPzE"}